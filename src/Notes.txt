Need new RingBuffer if pgn parsing in UDP handler too sloe

Change IP programatically
After mg_mgr_init(), you can do this:
struct mg_tcpip_if *ifp = MG_TCPIP_IFACE(&mgr);
ifp->ip = ...; // must be in network order
ifp->gw = ...; 
ifp->mask = ...;
The mgr->priv is a pointer to the interface, https://github.com/cesanta/mongoose/blob/36e21e53e0871836fb35dc8dd8f8236292cc3464/src/net_builtin.h#L31 . And you have access to all its guts.

// connection plan:
// Teensy Serial 5 RX (21) to F9P Position receiver TX1 (Position data)
// Teensy Serial 5 TX (20) to F9P Position receiver RX1 (RTCM data for RTK)
// Teensy Serial 8 RX (34) to F9P Heading receiver TX1 (Relative position from left antenna to right antenna)
// Teensy Serial 8 TX (35) to F9P Heading receiver RX1
// F9P Position receiver TX2 to F9P Heading receiver RX2 (RTCM data for Moving Base)
//
// Configuration of receiver
// Position F9P
//   CFG-RATE-MEAS - 100 ms -> 10 Hz
//   CFG-UART1-BAUDRATE 460800
//     UART1 In - RTCM (Correction Data from AOG)
//     UART1 Out - NMEA GGA
//   CFG-UART2-BAUDRATE 460800
//     UART2 Out - RTCM 1074,1084,1094,1230,4072.0 (Correction data for Heading F9P, Moving Base)  
//                 1124 is not needed (China's BeiDou system) - Save F9P brain power 
//
// Heading F9P
//   CFG-RATE-MEAS - 100 ms -> 10 Hz
//   CFG-UART1-BAUDRATE 460800
//     UART1 Out - UBX-NAV-RELPOSNED
//   CFG-UART2-BAUDRATE 460800
//     UART2 In

/*
  $PANDA
  (1) Time of fix

  position
  (2,3) 4807.038,N Latitude 48 deg 07.038' N
  (4,5) 01131.000,E Longitude 11 deg 31.000' E

  (6) 1 Fix quality:
    0 = invalid
    1 = GPS fix(SPS)
    2 = DGPS fix
    3 = PPS fix
    4 = Real Time Kinematic
    5 = Float RTK
    6 = estimated(dead reckoning)(2.3 feature)
    7 = Manual input mode
    8 = Simulation mode
  (7) Number of satellites being tracked
  (8) 0.9 Horizontal dilution of position
  (9) 545.4 Altitude (ALWAYS in Meters, above mean sea level)
  (10) 1.2 time in seconds since last DGPS update
  (11) Speed in knots

  FROM IMU OR DUAL:
  (12) Heading in degrees
  (13) Roll angle in degrees(positive roll = right leaning - right down, left up)

  (14) Pitch angle in degrees(Positive pitch = nose up)
  (15) Yaw Rate in Degrees / second

  CHKSUM
*/

/*
  $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M ,  ,*47
   0     1      2      3    4      5 6  7  8   9    10 11  12 13  14
        Time      Lat       Lon     FixSatsOP Alt
  Where:
     GGA          Global Positioning System Fix Data
     123519       Fix taken at 12:35:19 UTC
     4807.038,N   Latitude 48 deg 07.038' N
     01131.000,E  Longitude 11 deg 31.000' E
     1            Fix quality: 0 = invalid
                               1 = GPS fix (SPS)
                               2 = DGPS fix
                               3 = PPS fix
                               4 = Real Time Kinematic
                               5 = Float RTK
                               6 = estimated (dead reckoning) (2.3 feature)
                               7 = Manual input mode
                               8 = Simulation mode
     08           Number of satellites being tracked
     0.9          Horizontal dilution of position
     545.4,M      Altitude, Meters, above mean sea level
     46.9,M       Height of geoid (mean sea level) above WGS84
                      ellipsoid
     (empty field) time in seconds since last DGPS update
     (empty field) DGPS station ID number
      47          the checksum data, always begins with


  $GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,003.1,W*6A
  0      1    2   3      4    5      6   7     8     9     10   11
        Time      Lat        Lon       knots  Ang   Date  MagV

  Where:
     RMC          Recommended Minimum sentence C
     123519       Fix taken at 12:35:19 UTC
     A            Status A=active or V=Void.
     4807.038,N   Latitude 48 deg 07.038' N
     01131.000,E  Longitude 11 deg 31.000' E
     022.4        Speed over the ground in knots
     084.4        Track angle in degrees True
     230394       Date - 23rd of March 1994
     003.1,W      Magnetic Variation
      6A          The checksum data, always begins with

  $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K*48

    VTG          Track made good and ground speed
    054.7,T      True track made good (degrees)
    034.4,M      Magnetic track made good
    005.5,N      Ground speed, knots
    010.2,K      Ground speed, Kilometers per hour
     48          Checksum
*/

From Autosteer.h
// Relays
/*bool isRelayActiveHigh = true;
uint8_t relay = 0, relayHi = 0, uTurn = 0;*/


// // Switches/Sensors
// uint8_t kickoutInput = 0, workInput = 0, steerState = 0, switchByte = 0;
// float sensorReading, sensorSample;

// On Off


// steering variables




// // Steer switch button  ***********************************************************************************************************
// uint8_t steerReading, prevSteerReading = 1;  // currentState = 0
// int16_t pulseCount = 0;                      // Steering Wheel Encoder
// int16_t lastEnc = -999;

// // Variables for settings
// struct SteerSettingsStruct {
//   uint8_t Kp = 40;      // proportional gain
//   uint8_t lowPWM = 10;  // band of no action
//   int16_t wasOffset = 0;
//   uint8_t minPWM = 9;
//   uint8_t highPWM = 150;  // max PWM value
//   float steerSensorCounts = 120;
//   float AckermanFix = 1;  // sent as percent
// };
// SteerSettingsStruct defaultSteerSettings;                         // 11 bytes
// struct SteerSettingsStruct steerSettings = defaultSteerSettings;  // don't need 'struct' in front?

// Variables for settings - 0 is false
// struct SteerConfigStruct {
//   uint8_t InvertWAS = 0;
//   uint8_t IsRelayActiveHigh = 0;  // if zero, active low (default)
//   uint8_t MotorDriveDirection = 0;
//   uint8_t SingleInputWAS = 1;
//   uint8_t CytronDriver = 1;
//   uint8_t SteerSwitch = 0;  // 1 if switch selected
//   uint8_t SteerButton = 0;  // 1 if button selected
//   uint8_t ShaftEncoder = 0;
//   uint8_t PressureSensor = 0;
//   uint8_t CurrentSensor = 0;
//   uint8_t PulseCountMax = 3;
//   uint8_t IsDanfoss = 0;
//   uint8_t IsUseY_Axis = 0;  // Set to 0 to use X Axis, 1 to use Y avis
//   uint8_t MinSpeed = 0;
// };
// SteerConfigStruct const defaultSteerConfig;  // 9 bytes
// struct SteerConfigStruct steerConfig = defaultSteerConfig;

// ******************************** WATCHDOG checks & PWM output ********************************
    // if (steerState == 0) {
    // watchdogTimer = WATCHDOG_FORCE_VALUE;  //turn off steering motor
    //}// else {                                 //valid conditions to turn on autosteer
    //watchdogTimer = 0;                     //reset watchdog
    //}

/*
  adcSetup() detects whether to use Teensy ADC or I2C ADS1115
  - Teensy ADC set to oversample at 12 bits, average 16 readings at medium speed
    - 32uS to read Teensy ADC
  - ADS1115 set to continously sample as fast as possible
    - 485uS to retrieve ADS1115 value via I2C
*/

From PGN processing
        //printPgnAnnoucement(udpData[3], (char*)"Steer Data", len);

        // if (aogGpsToAutoSteerLoopTimerEnabled)
        // {
        //   aogGpsToAutoSteerLoopTimerEnabled = false;
        //   Serial.print((String)"\r\nGPS out to Steer Data in delay: " + aogGpsToAutoSteerLoopTimer);
        // }
        //Serial.printf(" %6i", micros() - pgn254Time);
        //pgn254Time = micros();
        //uint32_t pgn254Delay = pgn254Time - nmeaPgnSendTime;
        //if (pgn254Delay < pgn254MinDelay) pgn254MinDelay = pgn254Delay;
        //if (pgn254Delay > pgn254MaxDelay) pgn254MaxDelay = pgn254Delay;
        //if (pgn254AveDelay == 0) pgn254AveDelay = pgn254Delay;
        //else pgn254AveDelay = pgn254AveDelay * 0.99 + pgn254Delay * 0.01;
        //Serial.printf("->PGN254 delay: %4iuS  %4i %4i %4i", pgn254Delay, pgn254MinDelay, pgn254AveDelay, pgn254MaxDelay);

        //Steer Data 2 -------------------------------------------------
        // if (steerConfig.PressureSensor || steerConfig.CurrentSensor) {
        //   if (aog2Count++ > 2) {                                // send 1/3 of Steer Data rate (GPS hz / 3)
        //     // fromAutoSteerData FD 250 - sensor values etc
        //     uint8_t PGN_250[] = { 0x80, 0x81, 126, 0xFA, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0xCC };

        //     //Send fromAutosteer2
        //     PGN_250[5] = (byte)sensorReading;

        //     //add the checksum for AOG2
        //     CK_A = 0;

        //     for (uint8_t i = 2; i < sizeof(PGN_250) - 1; i++) {
        //       CK_A = (CK_A + PGN_250[i]);
        //     }

        //     PGN_250[sizeof(PGN_250) - 1] = CK_A;

        //     //off to AOG
        //     UDP_Susage.timeIn();
        //     UDP.SendUdpByte(PGN_250, sizeof(PGN_250), UDP.broadcastIP, UDP.portAgIO_9999);
        //     UDP_Susage.timeOut();
        //     aog2Count = 0;
        //   }
        // }